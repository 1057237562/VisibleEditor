java.util.concurrent.CompletableFuture
get(long,java.util.concurrent.TimeUnit)
get()
toString()
join()
handle(java.util.function.BiFunction)
handle(java.util.function.BiFunction)
isDone()
cancel(boolean)
isCancelled()
complete(java.lang.Object)
handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)
handleAsync(java.util.function.BiFunction)
handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)
handleAsync(java.util.function.BiFunction)
acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)
acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)
anyOf([Ljava.util.concurrent.CompletableFuture;)
applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)
applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)
completedFuture(java.lang.Object)
exceptionally(java.util.function.Function)
exceptionally(java.util.function.Function)
getNow(java.lang.Object)
getNumberOfDependents()
isCompletedExceptionally()
obtrudeException(java.lang.Throwable)
obtrudeValue(java.lang.Object)
runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAsync(java.lang.Runnable)
runAsync(java.lang.Runnable,java.util.concurrent.Executor)
supplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)
supplyAsync(java.util.function.Supplier)
thenAccept(java.util.function.Consumer)
thenAccept(java.util.function.Consumer)
thenAcceptAsync(java.util.function.Consumer)
thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)
thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)
thenAcceptAsync(java.util.function.Consumer)
thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)
thenApply(java.util.function.Function)
thenApply(java.util.function.Function)
thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)
thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)
thenApplyAsync(java.util.function.Function)
thenApplyAsync(java.util.function.Function)
thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCompose(java.util.function.Function)
thenCompose(java.util.function.Function)
thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)
thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)
thenComposeAsync(java.util.function.Function)
thenComposeAsync(java.util.function.Function)
thenRun(java.lang.Runnable)
thenRun(java.lang.Runnable)
thenRunAsync(java.lang.Runnable)
thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
thenRunAsync(java.lang.Runnable)
thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
toCompletableFuture()
whenComplete(java.util.function.BiConsumer)
whenComplete(java.util.function.BiConsumer)
whenCompleteAsync(java.util.function.BiConsumer)
whenCompleteAsync(java.util.function.BiConsumer)
whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)
whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)
completeExceptionally(java.lang.Throwable)
allOf([Ljava.util.concurrent.CompletableFuture;)
wait()
wait(long,int)
wait(long)
equals(java.lang.Object)
hashCode()
getClass()
notify()
notifyAll()
