java.util.concurrent.CompletionStage
handle(java.util.function.BiFunction)
handleAsync(java.util.function.BiFunction)
handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)
acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)
acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer)
applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)
applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function)
exceptionally(java.util.function.Function)
runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)
runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable)
thenAccept(java.util.function.Consumer)
thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)
thenAcceptAsync(java.util.function.Consumer)
thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)
thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)
thenApply(java.util.function.Function)
thenApplyAsync(java.util.function.Function)
thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)
thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)
thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction)
thenCompose(java.util.function.Function)
thenComposeAsync(java.util.function.Function)
thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)
thenRun(java.lang.Runnable)
thenRunAsync(java.lang.Runnable)
thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)
toCompletableFuture()
whenComplete(java.util.function.BiConsumer)
whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)
whenCompleteAsync(java.util.function.BiConsumer)
