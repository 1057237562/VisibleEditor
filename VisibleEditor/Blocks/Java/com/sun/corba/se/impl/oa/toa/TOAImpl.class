com.sun.corba.se.impl.oa.toa.TOAImpl
exit()
getInterfaces(java.lang.Object,[B)
connect(org.omg.CORBA.Object)
getState()
disconnect(org.omg.CORBA.Object)
enter()
getEffectivePolicy(int)
getManagerId()
getInvocationServant(com.sun.corba.se.spi.oa.OAInvocationInfo)
getLocalServant([B)
returnServant()
getObjectCopierFactory()
getORB()
getAdapterId()
getAdapterTemplate()
getCurrentFactory()
getIORTemplate()
setCurrentFactory(org.omg.PortableInterceptor.ObjectReferenceFactory)
makeInvocationInfo([B)
lifecycleWrapper()
initializeTemplate(com.sun.corba.se.spi.ior.ObjectKeyTemplate,boolean,com.sun.corba.se.impl.oa.poa.Policies,java.lang.String,java.lang.String,com.sun.corba.se.spi.ior.ObjectAdapterId)
iorWrapper()
makeObject(java.lang.String,[B)
omgLifecycleWrapper()
invocationWrapper()
omgInvocationWrapper()
_get_interface()
validate_connection()
_invoke(org.omg.CORBA.portable.OutputStream)
_create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue)
_create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)
_duplicate()
_get_domain_managers()
_get_interface_def()
_get_policy(int)
_hash(int)
_is_a(java.lang.String)
_is_equivalent(org.omg.CORBA.Object)
_non_existent()
_release()
_request(java.lang.String,boolean)
_request(java.lang.String)
_set_policy_override([Lorg.omg.CORBA.Policy;,org.omg.CORBA.SetOverrideType)
_is_local()
_orb()
_releaseReply(org.omg.CORBA.portable.InputStream)
_servant_postinvoke(org.omg.CORBA.portable.ServantObject)
_servant_preinvoke(java.lang.String,java.lang.Class)
wait()
wait(long,int)
wait(long)
equals(java.lang.Object)
toString()
hashCode()
getClass()
notify()
notifyAll()
